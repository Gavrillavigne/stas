Хабр:
https://habr.com/ru/articles/269589/

1) Правило Зависимостей:
Зависимости в исходном коде могут указывать только во внутрь.
Ничто из внутреннего круга не может знать что-либо о внешнем круге, ничто из внутреннего круга не может указывать на внешний круг.
Это касается функций, классов, переменных и т.д.
Структуры данных, используемых во внешнем круге не должны быть использованы во внутреннем круге,
особенно если эти структуры генерируются фреймворком во внешнем круге.
Мы не используем ничего из внешнего круга, чтобы могло повлиять на внутренний.

Правило Зависимостей применяется всегда.
По мере продвижения внутрь уровень абстракции возрастает.
Внешний круг — уровень деталей. Внутренний круг является наиболее общим.

2) Сущности
Сущности определяются бизнес-правилами предприятия.
Сущность может быть объектом с методами или она может представлять собой набор структур данных и функций.
Не имеет значения как долго сущность может быть использована в разных приложениях.
Если же вы пишете просто одиночное приложение, в этом случае сущностями являются бизнес-объекты этого приложения.
Они инкапсулируют наиболее общие высокоуровневые правила. Наименее вероятно, что они изменятся при каких-либо внешних изменениях.
Например, они не должны быть затронуты при изменении навигации по страницам или правил безопасности.
Внешние изменения не должны влиять на слой сущностей.

3) Сценарии
В этом слое реализуется специфика бизнес-правил. Он инкапсулирует и реализует все случаи использования системы.
Эти сценарии реализуют поток данных в и из слоя Cущностей для реализации бизнес-правил.
Мы не ожидаем изменения в этом слое, влияющих на Cущности.
Мы также не ожидаем, что это слой может быть затронут внешними изменениями, таких как базы данных, пользовательским интерфейсом или фреймворком.
Этот слой изолирован от таких проблем.
Мы, однако, ожидаем, что изменения в работе приложения повлияет на Cценарии.
Если будут какие-либо изменения в поведении приложения, то они несомненно затронут код в данном слое.

4) Интерфейс-Адаптеры (MVC)
Программное обеспечение в этом слое представляет собой набор адаптеров,
которые преобразуют данные из формата наиболее удобным для Сценариев и Сущностей,
в формат наиболее удобный для дальнейшего использования, например в БД.
Именно это слой, например, будет полностью содержать архитектуру MVC.
Модели являются скорее всего структурами данных, которые передаются от контроллеров к Сценариям, а затем обратно из Сценариев к Представлениям.
Точно так же, данные преобразуются, в этом слое, из формы наиболее удобным для Сценариев и Сущностей, в форму,
наиболее удобной для постоянного хранения, например в базе данных. Код, находящийся внутри этого круга не должен знать
что-либо о БД. Если БД — это SQL база данных, то любые SQL-инструкции не должны быть использованы на этом уровне.

5) Фреймворки и драйверы.
Наружный слой обычно состоит из фреймворков, БД, UI и т.д. Как правило, в этом слое не пишется много кода,
за исключением кода, который общается с внутренними кругами.
Это слой скопления деталей. Интернет — деталь, БД — деталь, мы держим эти штуки снаружи для уменьшения их влияния.

Пользователь
Файл
Директория
Платежи - в будущем

Создать сущности
Описать сценарии
Через юнит-тесты (TDD) создать абстракцию взаимодействия сущностей со сценариями