I. СЛОИ:

1. Presentation Layer:
    User Interface (UI): Этот уровень содержит компоненты, связанные с взаимодействием пользователя с приложением,
    такие как веб-интерфейс, мобильное приложение или графический интерфейс пользователя (GUI).
2. Application Layer:
    Application Service: Содержит бизнес-логику и принимает запросы от пользовательского интерфейса.
    Он вызывает методы службы доступа к данным для выполнения операций над файлами.

3. Domain Layer:
    - Entities: Определяют базовые объекты системы, такие как файлы, пользователи и папки.
        Эти объекты содержат свойства и методы, специфичные для домена.
    - Repositories: Интерфейсы, описывающие методы для доступа к данным. В нашем случае - репозитории для работы
        с пользователями, файлами и папками.
    - Services: Содержат бизнес-логику, которая не принадлежит непосредственно к какой-либо сущности, но выполняет
        важные операции.

4. Infrastructure Layer:
    - Data Access: Этот слой предоставляет реализации репозиториев, которые взаимодействуют с фактическими
        источниками данных (например, базой данных или облачным хранилищем).
    - External Services: Если будем использовать внешние API, то это место, где будем интегрировать эти службы.

II. СТРУКТУРА ПРОЕКТА:

project/
├── public/
│   ├── index.html
│   ├── css/
│   ├── js/
│   ├── images/
│   └── ...
├── app/
│   ├── Controllers/
│   │   ├── UserController.php
│   │   ├── FileController.php
│   │   ├── DirectoryController.php
│   └── Services/
│       ├── UserService.php
│       ├── FileService.php
│       ├── DirectoryService.php
│   ├── Domain/
│   │   ├── User.php
│   │   ├── File.php
│   │   ├── Directory.php
│   ├── Repositories/
│   │   ├── UserRepository.php
│   │   ├── FileRepository.php
│   │   ├── DirectoryRepository.php
├── infrastructure/
│   ├── config/
│   ├── storage/
│   ├── tests/
│   ├── ...
├── vendor/
├── composer.json
└── ...
