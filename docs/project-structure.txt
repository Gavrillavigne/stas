I. СЛОИ:

1. Presentation Layer:
    User Interface (UI): Этот уровень содержит компоненты, связанные с взаимодействием пользователя с приложением,
    такие как веб-интерфейс, мобильное приложение или графический интерфейс пользователя (GUI).

2. Application Layer:
    Application Service: Содержит бизнес-логику и принимает запросы от пользовательского интерфейса.
    Он вызывает методы службы доступа к данным для выполнения операций над файлами.

3. Domain Layer (DDD - почитать) - по сути это Application Layer
    - Entities: Определяют базовые объекты системы, такие как файлы, пользователи и папки.
        Эти объекты содержат свойства и методы, специфичные для домена.
    - Repositories: Интерфейсы, описывающие методы для доступа к данным. В нашем случае - репозитории для работы
        с пользователями, файлами и папками.
    - Services: Содержат бизнес-логику, которая не принадлежит непосредственно к какой-либо сущности, но выполняет
        важные операции.

4. Infrastructure Layer:
    - Data Access: Этот слой предоставляет реализации репозиториев, которые взаимодействуют с фактическими
        источниками данных (например, базой данных или облачным хранилищем).
    - External Services: Если будем использовать внешние API, то это место, где будем интегрировать эти службы.
========================================================================================================================
II. СТРУКТУРА ПРОЕКТА:

project/
├── public/
│   ├── index.html
│   ├── css/
│   ├── js/
│   ├── images/
│   └── ...
├── app/
│   ├── Controllers/
│   │   ├── UserController.php
│   │   ├── FileController.php
│   │   ├── DirectoryController.php
│   └── Services/
│       ├── UserService.php
│       ├── FileService.php
│       ├── DirectoryService.php
│   ├── Domain/
│   │   ├── User.php
│   │   ├── File.php
│   │   ├── Directory.php
│   ├── Repositories/
│   │   ├── UserRepository.php
│   │   ├── FileRepository.php
│   │   ├── DirectoryRepository.php
├── infrastructure/
│   ├── config/
│   ├── storage/
│   ├── tests/
│   ├── ...
├── vendor/
├── composer.json
└── ...

Почитать:
Чистая функция (Pure Function) - это функция, которая при вызове возвращает результат, зависящий только от своих
входных аргументов (параметров) и не имеет побочных эффектов. Это означает, что результат выполнения чистой
функции однозначно определен своими аргументами и не зависит от глобальных переменных, изменяемых состояний
программы или внешних данных. Чистые функции предсказуемы, легко тестируются и облегчают понимание и отладку кода.

Побочные эффекты (Side Effects) - это изменения, которые функция вносит во внешнее состояние программы,
кроме возвращаемого значения. Побочные эффекты могут включать в себя изменение глобальных переменных, запись в файл,
взаимодействие с базой данных, отправку сетевых запросов и т. д. Функциональное программирование стремится
минимизировать побочные эффекты, чтобы код был более предсказуемым и устойчивым.
------------------------------------------------------------------------------------------------------------------------
Идемпотентность (idempotence) - это свойство операции или функции, которое гарантирует, что многократное выполнение
этой операции или функции с одним и тем же входным набором данных приведет к тому же результату, что и ее однократное
выполнение. Иными словами, если операция или функция являются идемпотентными, повторное их выполнение не изменит
состояния системы или данных за предыдущий результат.

Идемпотентность имеет важное значение в информационных системах, особенно в контексте распределенных систем и
сетевых запросов. Это позволяет безопасно выполнять одну и ту же операцию несколько раз, даже если запросы могут
быть задублированы, переотправлены или выполняться в разной последовательности, без нежелательных эффектов.

Примеры идемпотентных операций в информационных системах включают создание или удаление ресурсов,
запись данных в базу данных, отправку запросов HTTP (если они правильно реализованы), и другие. Системы, которые
поддерживают идемпотентность, более устойчивы к ошибкам и обеспечивают предсказуемое и надежное поведение
при повторном выполнении операций.